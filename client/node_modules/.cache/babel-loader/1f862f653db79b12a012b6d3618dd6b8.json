{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database shop-shop version 1\n    const request = window.indexedDB.open('shop-shop', 1); // create variables to hold reference to the database transaction (tx)\n\n    let db, tx, store; // // if versoin has changed of if it is the frist time using database \n    // run this method and create the three objects\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set primary key index to be the _id of the data\n\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the db variable\n      db = request.result; // open a transaction do whatever we pass into store name, must match one of the object store names\n\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName); // if there is any errors let us know\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n    };\n\n    switch (method) {\n      case 'put':\n        store.put(object);\n        resolve(object);\n        break;\n\n      case 'get':\n        const all = store.getAll();\n\n        all.onsuccess = function () {\n          resolve(all.result);\n        };\n\n        break;\n\n      case 'delete':\n        store.delete(object._id);\n        break;\n\n      default:\n        console.log('No valid method');\n        break;\n    }\n\n    tx.oncomplete = function () {\n      db.close();\n    };\n  }); // add actual functionality that will make a connection with the database\n}","map":{"version":3,"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"sources":["C:/Users/geici/OneDrive/Desktop/unc bootcamp/projects/shop-shop-/client/src/utils/helpers.js"],"sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database shop-shop version 1\n    const request = window.indexedDB.open('shop-shop', 1)\n    // create variables to hold reference to the database transaction (tx)\n    let db, tx, store;\n\n    // // if versoin has changed of if it is the frist time using database \n    // run this method and create the three objects\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n\n      // create object store for each type of data and set primary key index to be the _id of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n    request.onsuccess = function (e) {\n      // save a reference of the database to the db variable\n      db = request.result;\n      // open a transaction do whatever we pass into store name, must match one of the object store names\n      tx = db.transaction(storeName, 'readwrite');\n\n      store = tx.objectStore(storeName)\n      // if there is any errors let us know\n      db.onerror = function (e) {\n        console.log('error', e)\n      }\n    }\n    switch (method) {\n      case 'put':\n        store.put(object);\n        resolve(object);\n        break;\n\n      case 'get':\n        const all = store.getAll();\n        all.onsuccess = function () {\n          resolve(all.result)\n        };\n        break;\n      case 'delete':\n        store.delete(object._id);\n        break;\n      default:\n        console.log('No valid method');\n        break;\n    }\n    tx.oncomplete = function () {\n      db.close()\n    }\n  });\n  // add actual functionality that will make a connection with the database\n\n}"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;EACrC,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACf,OAAOD,IAAP;EACD;;EACD,OAAOA,IAAI,GAAG,GAAd;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;EACpD,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFsC,CAGtC;;IACA,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CAJsC,CAMtC;IACA;;IAEAN,OAAO,CAACO,eAAR,GAA0B,UAAUC,CAAV,EAAa;MACrC,MAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADqC,CAGrC;;MACAL,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;QAAEC,OAAO,EAAE;MAAX,CAAjC;MACAP,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;QAAEC,OAAO,EAAE;MAAX,CAAnC;MACAP,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;QAAEC,OAAO,EAAE;MAAX,CAA7B;IACD,CAPD,CATsC,CAkBtC;;;IACAX,OAAO,CAACY,OAAR,GAAkB,UAAUJ,CAAV,EAAa;MAC7BK,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACD,CAFD;;IAGAd,OAAO,CAACe,SAAR,GAAoB,UAAUP,CAAV,EAAa;MAC/B;MACAJ,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAF+B,CAG/B;;MACAJ,EAAE,GAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,EAA0B,WAA1B,CAAL;MAEAY,KAAK,GAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CAN+B,CAO/B;;MACAU,EAAE,CAACQ,OAAH,GAAa,UAAUJ,CAAV,EAAa;QACxBK,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,CAArB;MACD,CAFD;IAGD,CAXD;;IAYA,QAAQb,MAAR;MACE,KAAK,KAAL;QACEW,KAAK,CAACY,GAAN,CAAUtB,MAAV;QACAE,OAAO,CAACF,MAAD,CAAP;QACA;;MAEF,KAAK,KAAL;QACE,MAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;;QACAD,GAAG,CAACJ,SAAJ,GAAgB,YAAY;UAC1BjB,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP;QACD,CAFD;;QAGA;;MACF,KAAK,QAAL;QACEH,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB;QACA;;MACF;QACET,OAAO,CAACC,GAAR,CAAY,iBAAZ;QACA;IAjBJ;;IAmBAT,EAAE,CAACkB,UAAH,GAAgB,YAAY;MAC1BnB,EAAE,CAACoB,KAAH;IACD,CAFD;EAGD,CAxDM,CAAP,CADoD,CA0DpD;AAED"},"metadata":{},"sourceType":"module"}